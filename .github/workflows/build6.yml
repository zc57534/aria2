name: Build6

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        include:
          - target: android-arm64
            host: aarch64-linux-android
            toolchain: aarch64-linux-android21-clang
          - target: android-x86_64
            host: x86_64-linux-android
            toolchain: x86_64-linux-android21-clang
          - target: linux-arm64
            host: aarch64-linux-gnu
          - target: linux-x86_64
            host: x86_64-linux-gnu
          - target: windows-x86_64
            host: x86_64-w64-mingw32

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install base dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            autoconf automake build-essential libtool pkg-config \
            zlib1g-dev libsqlite3-dev libssl-dev libgnutls28-dev \
            libc-ares-dev libssh2-1-dev libcppunit-dev curl unzip

      - name: Setup Android NDK (Manual)
        if: contains(matrix.target, 'android')
        run: |
          NDK_VERSION="r25b"
          NDK_ZIP="android-ndk-$NDK_VERSION-linux.zip"
          wget -q https://dl.google.com/android/repository/$NDK_ZIP
          unzip -q $NDK_ZIP -d /tmp
          echo "NDK_ROOT=/tmp/android-ndk-$NDK_VERSION" >> $GITHUB_ENV
          echo "TOOLCHAIN=$NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64" >> $GITHUB_ENV

      - name: Install cross-compilers
        run: |
          case "${{ matrix.target }}" in
            linux-arm64)
              sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
              ;;
            windows-x86_64)
              sudo apt-get install -y mingw-w64
              ;;
          esac

      - name: Setup environment variables
        run: |
          if [[ "${{ matrix.target }}" == android* ]]; then
            echo "CC=$TOOLCHAIN/bin/${{ matrix.toolchain }}" >> $GITHUB_ENV
            echo "CXX=$TOOLCHAIN/bin/${{ matrix.toolchain }}++" >> $GITHUB_ENV
            echo "AR=$TOOLCHAIN/bin/llvm-ar" >> $GITHUB_ENV
            echo "LD=$TOOLCHAIN/bin/ld" >> $GITHUB_ENV
            echo "RANLIB=$TOOLCHAIN/bin/llvm-ranlib" >> $GITHUB_ENV
            echo "STRIP=$TOOLCHAIN/bin/llvm-strip" >> $GITHUB_ENV
            echo "SYSROOT=$TOOLCHAIN/sysroot" >> $GITHUB_ENV
          elif [[ "${{ matrix.target }}" == linux* ]]; then
            echo "CC=${{ matrix.host }}-gcc" >> $GITHUB_ENV
            echo "CXX=${{ matrix.host }}-g++" >> $GITHUB_ENV
          elif [[ "${{ matrix.target }}" == windows* ]]; then
            echo "CC=x86_64-w64-mingw32-gcc" >> $GITHUB_ENV
            echo "CXX=x86_64-w64-mingw32-g++" >> $GITHUB_ENV
          fi

      - name: Generate configure script
        run: autoreconf -i

      - name: Configure build
        run: |
          CONFIG_FLAGS=""
          case "${{ matrix.target }}" in
            android*)
              CONFIG_FLAGS="--host=${{ matrix.host }} \
                --disable-shared \
                --enable-static \
                --with-openssl \
                --with-libssh2 \
                --with-sqlite3 \
                --without-libxml2 \
                CXXFLAGS='-static-libstdc++ -fPIE' \
                LDFLAGS='-fPIE -pie' \
                PKG_CONFIG_PATH=$TOOLCHAIN/../sysroot/usr/lib/${{ matrix.host }}/pkgconfig"
              ;;
            windows*)
              CONFIG_FLAGS="--host=${{ matrix.host }} \
                --disable-shared \
                --enable-static \
                --with-openssl \
                --with-libssh2 \
                --with-sqlite3"
              ;;
            *)
              CONFIG_FLAGS="--host=${{ matrix.host }} \
                --with-openssl \
                --with-libssh2 \
                --with-sqlite3"
              ;;
          esac

          ./configure $CONFIG_FLAGS

      - name: Build executable
        run: |
          make -j$(nproc)
          mkdir -p artifacts
          case "${{ matrix.target }}" in
            windows*) cp src/aria2c.exe artifacts/aria2c-${{ matrix.target }}.exe ;;
            *) cp src/aria2c artifacts/aria2c-${{ matrix.target }} ;;
          esac

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: aria2c-binaries
          path: artifacts/
