name: Build aria2

on:
  workflow_dispatch:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  linux-build:
    name: Build Linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x86_64, armv7, aarch64]
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          autoconf automake autotools-dev libtool \
          libcppunit-dev libssl-dev libxml2-dev \
          zlib1g-dev libgcrypt20-dev libsqlite3-dev \
          libssh2-1-dev libc-ares-dev libgmp-dev \
          nettle-dev libxml2-dev pkg-config \
          gcc-${ARCH}-linux-gnu g++-${ARCH}-linux-gnu
        case "${{ matrix.arch }}" in
          armv7)
            echo "ARCH=arm-linux-gnueabihf" >> $GITHUB_ENV
            ;;
          aarch64)
            echo "ARCH=aarch64-linux-gnu" >> $GITHUB_ENV
            ;;
          *)
            echo "ARCH=x86_64-linux-gnu" >> $GITHUB_ENV
            ;;
        esac

    - name: Configure and build
      run: |
        autoreconf -i
        ./configure \
          --host=${{ env.ARCH }} \
          --enable-static=yes \
          --enable-shared=no \
          --without-libuv \
          --with-libxml2 \
          --with-sqlite3 \
          --with-libz \
          --with-libssh2 \
          --with-libcares \
          --with-libgmp \
          --with-libgcrypt
        make -j$(nproc)

    - name: Archive binary
      run: tar czf aria2-${{ matrix.arch }}.tar.gz src/aria2c
      if: success()

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: aria2-linux-${{ matrix.arch }}
        path: aria2-${{ matrix.arch }}.tar.gz

  macos-build:
    name: Build macOS
    runs-on: macos-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        brew update
        brew install autoconf automake libtool pkg-config \
          cppunit openssl@1.1 libssh2 c-ares sqlite libxml2 \
          aria2

    - name: Configure and build
      run: |
        autoreconf -i
        ./configure \
          --enable-static=yes \
          --enable-shared=no \
          --without-libuv \
          --with-libxml2 \
          --with-sqlite3 \
          --with-libz \
          --with-libssh2 \
          --with-libcares
        make -j$(sysctl -n hw.logicalcpu)

    - name: Archive binary
      run: tar czf aria2-macos-x86_64.tar.gz src/aria2c

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: aria2-macos
        path: aria2-macos-x86_64.tar.gz

  windows-build:
    name: Build Windows
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install MSYS2
      uses: msys2/setup-msys2@v2
      with:
        update: true
        install: >-
          autoconf
          automake
          libtool
          pkg-config
          make
          gcc
          mingw-w64-x86_64-toolchain
          mingw-w64-x86_64-cppunit
          mingw-w64-x86_64-openssl
          mingw-w64-x86_64-sqlite3
          mingw-w64-x86_64-libssh2
          mingw-w64-x86_64-libxml2
          mingw-w64-x86_64-zlib

    - name: Configure and build
      shell: msys2 {0}
      run: |
        autoreconf -i
        ./configure \
          --host=x86_64-w64-mingw32 \
          --enable-static=yes \
          --enable-shared=no \
          --without-libuv \
          --with-libxml2 \
          --with-sqlite3 \
          --with-libz \
          --with-libssh2 \
          --with-libcares
        make -j$(nproc)

    - name: Zip binary
      run: zip -j aria2-windows-x86_64.zip src/aria2c.exe

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: aria2-windows
        path: aria2-windows-x86_64.zip
