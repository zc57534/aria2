name: Build and Upload aria2

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        platform: [android-arm64, linux-amd64, linux-arm64, windows-x64, windows-x86]
        include:
          - platform: android-arm64
            host: arm-linux-androideabi
            target: aria2c_android_arm64
            cross_compile: true
          - platform: linux-amd64
            host: x86_64-linux-gnu
            target: aria2c_linux_amd64
            cross_compile: true
          - platform: linux-arm64
            host: aarch64-linux-gnu
            target: aria2c_linux_arm64
            cross_compile: true
          - platform: windows-x64
            host: x86_64-w64-mingw32
            target: aria2c_windows_x64.exe
            cross_compile: true
          - platform: windows-x86
            host: i686-w64-mingw32
            target: aria2c_windows_x86.exe
            cross_compile: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            g++-12 \
            clang-15 \
            autoconf \
            automake \
            autotools-dev \
            autopoint \
            libtool \
            pkg-config \
            libssl-dev \
            libgnutls28-dev \
            libc-ares-dev \
            zlib1g-dev \
            libsqlite3-dev \
            libssh2-1-dev \
            libcppunit-dev \
            mingw-w64

      - name: Generate configure script
        run: |
          autoreconf -i

      - name: Set up cross-compilation tools
        run: |
          if [ "${{ matrix.platform }}" == "android-arm64" ]; then
            # Set up Android NDK for ARM64
            export ANDROID_NDK_HOME=/path/to/android-ndk
            export PATH=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH
            export CC=clang
            export CXX=clang++
            export AR=llvm-ar
            export AS=llvm-as
            export LD=ld.lld
            export RANLIB=llvm-ranlib
            export STRIP=llvm-strip
          elif [ "${{ matrix.platform }}" == "windows-x64" ] || [ "${{ matrix.platform }}" == "windows-x86" ]; then
            # Set up MinGW for Windows cross-compilation
            export PATH=/usr/x86_64-w64-mingw32/bin:$PATH
            export CC=x86_64-w64-mingw32-gcc
            export CXX=x86_64-w64-mingw32-g++
            export AR=x86_64-w64-mingw32-ar
            export AS=x86_64-w64-mingw32-as
            export LD=x86_64-w64-mingw32-ld
            export RANLIB=x86_64-w64-mingw32-ranlib
            export STRIP=x86_64-w64-mingw32-strip
          fi

      - name: Build aria2
        run: |
          if [ "${{ matrix.platform }}" == "android-arm64" ]; then
            ./configure --host=arm-linux-androideabi --without-gnutls --with-openssl --without-libxml2 ARIA2_STATIC=yes
          elif [ "${{ matrix.platform }}" == "linux-amd64" ]; then
            ./configure --host=x86_64-linux-gnu --without-gnutls --with-openssl --without-libxml2 ARIA2_STATIC=yes
          elif [ "${{ matrix.platform }}" == "linux-arm64" ]; then
            ./configure --host=aarch64-linux-gnu --without-gnutls --with-openssl --without-libxml2 ARIA2_STATIC=yes
          elif [ "${{ matrix.platform }}" == "windows-x64" ]; then
            ./configure --host=x86_64-w64-mingw32 --without-gnutls --with-openssl --without-libxml2 ARIA2_STATIC=yes
          elif [ "${{ matrix.platform }}" == "windows-x86" ]; then
            ./configure --host=i686-w64-mingw32 --without-gnutls --with-openssl --without-libxml2 ARIA2_STATIC=yes
          fi
          make

      - name: Rename and collect build artifacts
        run: |
          mkdir -p build_output
          if [ "${{ matrix.platform }}" == "android-arm64" ]; then
            mv src/aria2c build_output/aria2c_android_arm64
          elif [ "${{ matrix.platform }}" == "linux-amd64" ]; then
            mv src/aria2c build_output/aria2c_linux_amd64
          elif [ "${{ matrix.platform }}" == "linux-arm64" ]; then
            mv src/aria2c build_output/aria2c_linux_arm64
          elif [ "${{ matrix.platform }}" == "windows-x64" ]; then
            mv src/aria2c.exe build_output/aria2c_windows_x64.exe
          elif [ "${{ matrix.platform }}" == "windows-x86" ]; then
            mv src/aria2c.exe build_output/aria2c_windows_x86.exe
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: aria2-build
          path: build_output/*
