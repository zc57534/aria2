name: Build7

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        include:
          - target: linux-arm64
            host: aarch64-linux-gnu
          - target: android-arm64
            host: aarch64-linux-android
            toolchain: aarch64-linux-android21-clang

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install base dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            autoconf automake build-essential libtool pkg-config \
            zlib1g-dev libsqlite3-dev libssl-dev libgnutls28-dev \
            libc-ares-dev libssh2-1-dev libcppunit-dev curl unzip \
            gettext autopoint

      - name: Setup Android NDK (Only for Android)
        if: matrix.target == 'android-arm64'
        run: |
          NDK_VERSION="r25b"
          NDK_ZIP="android-ndk-$NDK_VERSION-linux.zip"
          wget -q https://dl.google.com/android/repository/$NDK_ZIP
          unzip -q $NDK_ZIP -d /tmp
          echo "NDK_ROOT=/tmp/android-ndk-$NDK_VERSION" >> $GITHUB_ENV
          echo "TOOLCHAIN=$NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64" >> $GITHUB_ENV

      - name: Install cross-compiler (Linux ARM64)
        if: matrix.target == 'linux-arm64'
        run: sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Setup environment variables
        run: |
          if [ "${{ matrix.target }}" == "android-arm64" ]; then
            echo "CC=$TOOLCHAIN/bin/${{ matrix.toolchain }}" >> $GITHUB_ENV
            echo "CXX=$TOOLCHAIN/bin/${{ matrix.toolchain }}++" >> $GITHUB_ENV
            echo "AR=$TOOLCHAIN/bin/llvm-ar" >> $GITHUB_ENV
          elif [ "${{ matrix.target }}" == "linux-arm64" ]; then
            echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
            echo "CXX=aarch64-linux-gnu-g++" >> $GITHUB_ENV
          fi

      - name: Generate configure script (Debug)
        run: |
          # 调试信息输出
          echo "--- Autotools versions ---"
          autoreconf --version
          aclocal --version
          automake --version
          autoconf --version

          # 分步执行生成过程
          aclocal -I m4
          libtoolize --force --copy --automake
          autoheader
          automake --add-missing --copy --force-missing
          autoconf -f

          # 验证生成文件
          [ -f configure ] || (echo "Missing configure script!"; exit 1)
          [ -f Makefile.in ] || (echo "Missing Makefile.in!"; exit 1)

      - name: Configure build
        run: |
          CONFIG_FLAGS="--host=${{ matrix.host }}"
          
          if [ "${{ matrix.target }}" == "android-arm64" ]; then
            CONFIG_FLAGS="$CONFIG_FLAGS \
              --disable-shared \
              --enable-static \
              --with-openssl \
              --with-libssh2 \
              --with-sqlite3 \
              CXXFLAGS='-static-libstdc++ -fPIE' \
              LDFLAGS='-fPIE -pie'"
          fi

          ./configure $CONFIG_FLAGS

      - name: Build executable
        run: |
          make -j$(nproc)
          mkdir -p artifacts
          if [ "${{ matrix.target }}" == "android-arm64" ]; then
            cp src/aria2c artifacts/aria2c-${{ matrix.target }}
          else
            cp src/aria2c artifacts/aria2c-${{ matrix.target }}
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: aria2c-arm64
          path: artifacts/
