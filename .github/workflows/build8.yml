name: Build8

on:
  workflow_dispatch:
  push:
    branches: [ "main", "master" ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        platform: [android-arm64, linux-amd64, linux-arm64]
        include:
          - platform: android-arm64
            host: arm-linux-androideabi
            target: aria2c_android_arm64
            cross_compile: true
          - platform: linux-amd64
            host: x86_64-linux-gnu
            target: aria2c_linux_amd64
            cross_compile: true
          - platform: linux-arm64
            host: aarch64-linux-gnu
            target: aria2c_linux_arm64
            cross_compile: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y git tree which wget libcurl4-openssl-dev libevent-dev ca-certificates libssl-dev pkg-config build-essential intltool git autoconf automake libtool autopoint libxml2-dev liblzma-dev zlib1g-dev libgcrypt-dev libc-ares-dev libsqlite3-dev lzma
          wget https://github.com/c-ares/c-ares/releases/download/v1.34.4/c-ares-1.34.4.tar.gz
          tar -xzvf c-ares-1.34.4.tar.gz
          cd c-ares-1.34.4
          ./configure
          make
          make install

      - name: Generate configure script
        run: |
          autoreconf -i

      - name: Set up cross-compilation tools
        run: |
          if [ "${{ matrix.platform }}" == "android-arm64" ]; then
            export ANDROID_NDK_HOME=/path/to/android-ndk
            export PATH=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH
            export CC=clang
            export CXX=clang++
            export AR=llvm-ar
            export AS=llvm-as
            export LD=ld.lld
            export RANLIB=llvm-ranlib
            export STRIP=llvm-strip
          elif [ "${{ matrix.platform }}" == "linux-amd64" ]; then
            export CC=x86_64-linux-gnu-gcc
            export CXX=x86_64-linux-gnu-g++
            export AR=x86_64-linux-gnu-ar
            export AS=x86_64-linux-gnu-as
            export LD=x86_64-linux-gnu-ld
            export RANLIB=x86_64-linux-gnu-ranlib
            export STRIP=x86_64-linux-gnu-strip
          elif [ "${{ matrix.platform }}" == "linux-arm64" ]; then
            export CC=aarch64-linux-gnu-gcc
            export CXX=aarch64-linux-gnu-g++
            export AR=aarch64-linux-gnu-ar
            export AS=aarch64-linux-gnu-as
            export LD=aarch64-linux-gnu-ld
            export RANLIB=aarch64-linux-gnu-ranlib
            export STRIP=aarch64-linux-gnu-strip
          fi

      - name: Build aria2
        run: |
          if [ "${{ matrix.platform }}" == "android-arm64" ]; then
            ./configure --host=arm-linux-androideabi --without-gnutls --with-openssl ARIA2_STATIC=yes
          elif [ "${{ matrix.platform }}" == "linux-amd64" ]; then
            ./configure --host=x86_64-linux-gnu --without-gnutls --with-openssl ARIA2_STATIC=yes
          elif [ "${{ matrix.platform }}" == "linux-arm64" ]; then
            ./configure --host=aarch64-linux-gnu --without-gnutls --with-openssl ARIA2_STATIC=yes
          fi
          make -j"$(nproc 2> /dev/null || sysctl -n hw.ncpu)"

      - name: Rename and collect build artifacts
        run: |
          mkdir -p build_output
          mv src/aria2c build_output/aria2

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: aria2-${{ matrix.platform }}
          path: build_output/aria2
